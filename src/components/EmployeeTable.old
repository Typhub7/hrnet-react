/*import React, { useMemo } from 'react';
import {
  useTable,
  useSortBy,
  usePagination,
  useGlobalFilter,
  Column,
  TableInstance,
} from 'react-table';
import PaginationControls from './PaginationControls';
import GlobalFilter from './GlobalFilter';
import PageSizeSelector from './PageSizeSelector';

// DÃ©finition de l'interface pour Employee
interface Employee {
  firstName: string;
  lastName: string;
  startDate: string;
  department: string;
  dateOfBirth: string;
  street: string;
  city: string;
  state: string;
  zipCode: string;
}

const EmployeeTable: React.FC = () => {
  const employees: Employee[] = JSON.parse(localStorage.getItem('employees') || '[]');

  const data = useMemo(() => employees, [employees]);

  const columns: Column<Employee>[] = useMemo(
    () => [
      { Header: 'First Name', accessor: 'firstName' },
      { Header: 'Last Name', accessor: 'lastName' },
      { Header: 'Start Date', accessor: 'startDate' },
      { Header: 'Department', accessor: 'department' },
      { Header: 'Date of Birth', accessor: 'dateOfBirth' },
      { Header: 'Street', accessor: 'street' },
      { Header: 'City', accessor: 'city' },
      { Header: 'State', accessor: 'state' },
      { Header: 'Zip Code', accessor: 'zipCode' },
    ],
    []
  );

  const {
    getTableProps,
    getTableBodyProps,
    headerGroups,
    prepareRow,
    page,
    state: { globalFilter },
    setGlobalFilter,
    setPageSize,
  } = useTable(
    {
      columns,
      data,
      initialState: { globalFilter: '', pageSize: 10 }, // Initialise le filtre global Ã  une chaÃ®ne vide et pageSize Ã  10
    },
    useGlobalFilter,
    useSortBy,
    usePagination
  ) as TableInstance<Employee>;

  return (
    <div>
      <GlobalFilter globalFilter={globalFilter || ''} setGlobalFilter={setGlobalFilter} />
      <table {...getTableProps()} style={{ width: '100%', border: '1px solid black' }}>
        <thead>
          {headerGroups.map((headerGroup) => (
            <tr {...headerGroup.getHeaderGroupProps()}>
              {headerGroup.headers.map((column) => (
                <th {...column.getHeaderProps(column.getSortByToggleProps())}>
                  {column.render('Header')}
                  <span>
                    {column.isSorted ? (column.isSortedDesc ? ' ðŸ”½' : ' ðŸ”¼') : ''}
                  </span>
                </th>
              ))}
            </tr>
          ))}
        </thead>
        <tbody {...getTableBodyProps()}>
          {page.map((row) => {
            prepareRow(row);
            return (
              <tr {...row.getRowProps()}>
                {row.cells.map((cell) => (
                  <td {...cell.getCellProps()}>{cell.render('Cell')}</td>
                ))}
              </tr>
            );
          })}
        </tbody>
      </table>
      <div className="pagination">
        <PageSizeSelector />
        <PaginationControls />
      </div>
    </div>
  );
};

export default EmployeeTable;
*/
